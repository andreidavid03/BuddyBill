generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                   String               @id @default(uuid())
  email                String               @unique
  password             String
  ownedTrips           Trip[]               @relation("OwnedTrips")
  trips                Trip[]               @relation("TripUsers")
  expenses             Expense[]            // Expenses where this user is the payer or creator
  notifications        Notification[]
  name                 String?
  friendshipsInitiated Friendship[]         @relation("Initiator")
  friendshipsReceived  Friendship[]         @relation("Receiver")
  participatedExpenses ExpenseParticipant[]
  paymentsMade         Payment[]            @relation("PayerPayments")    // Payments made by this user
  paymentsReceived     Payment[]            @relation("ReceiverPayments") // Payments received by this user
}

model Friendship {
  id          String         @id @default(uuid())
  initiator   User           @relation("Initiator", fields: [initiatorId], references: [id])
  initiatorId String
  receiver    User           @relation("Receiver", fields: [receiverId], references: [id])
  receiverId  String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@index([initiatorId])
  @@index([receiverId])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Trip {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  user      User      @relation(fields: [userId], references: [id], name: "OwnedTrips")
  expenses  Expense[]
  users     User[]    @relation("TripUsers")
  payments  Payment[] // Payments associated with this trip
}

model Expense {
  id            String               @id @default(uuid())
  amount        Float
  description   String
  isPaid        Boolean              @default(false)
  createdAt     DateTime             @default(now())
  tripId        String
  trip          Trip                 @relation(fields: [tripId], references: [id])
  userId        String               // User who created/paid the expense (can be different from paidById)
  user          User                 @relation(fields: [userId], references: [id])
  paymentType   String?
  notifications Notification[]
  paidById      String               // User who actually paid the expense
  participants  ExpenseParticipant[] // Users who participated in this expense
}

model ExpenseParticipant {
  id         String  @id @default(uuid())
  expenseId  String
  expense    Expense @relation(fields: [expenseId], references: [id])
  amount     Float
  userId     String
  user       User    @relation(fields: [userId], references: [id])
}

model Notification {
  id        String    @id @default(uuid())
  message   String
  createdAt DateTime  @default(now())
  isRead    Boolean   @default(false)
  type      String    // ✏️ Adaugă aici!
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  expenseId String?
  expense   Expense?  @relation(fields: [expenseId], references: [id])
}


model Payment {
  id          String   @id @default(uuid())
  payerId     String   // Utilizatorul care a plătit
  payer       User     @relation("PayerPayments", fields: [payerId], references: [id])
  receiverId  String   // Utilizatorul care a primit plata
  receiver    User     @relation("ReceiverPayments", fields: [receiverId], references: [id])
  amount      Float    // Suma plătită
  tripId      String   // ID-ul călătoriei la care se referă plata
  trip        Trip     @relation(fields: [tripId], references: [id])
  createdAt   DateTime @default(now())

  @@index([payerId])
  @@index([receiverId])
  @@index([tripId])
}
